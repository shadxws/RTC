import { Button, CloseButton, Heading, Input, useColorMode, Tooltip, useToast } from "@chakra-ui/react";
import { useEffect, useRef, useState } from "react";
import { Message } from "./Message";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Array} props.messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {string} props.chatRoom - –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
 * @param {Function} props.sendMessage - –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Function} props.closeChat - –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
 * @param {string} props.currentUser - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @param {Array} props.users - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {string} props.error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {object} props.connection - –û–±—ä–µ–∫—Ç SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export const Chat = ({ messages, chatRoom, sendMessage, closeChat, currentUser, users = [], error, connection }) => {
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	const [message, setMessage] = useState("");
	// –†–µ—Ñ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
	const messagesEndRef = useRef(null);
	const { colorMode, toggleColorMode } = useColorMode();
	const toast = useToast();

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
	useEffect(() => {
		messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
	}, [messages]);

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
	useEffect(() => {
		if (error) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: error,
				status: "error",
				duration: 4000,
				isClosable: true,
				position: "top"
			});
		}
	}, [error, toast]);

	/**
	 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	 * @returns {string|null} –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ null
	 */
	const validateMessage = (text) => {
		if (!text.trim()) {
			return "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º";
		}
		if (text.length > 1000) {
			return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)";
		}
		return null;
	};

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	const onSendMessage = () => {
		const error = validateMessage(message);
		if (error) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: error,
				status: "error",
				duration: 3000,
				isClosable: true,
				position: "top"
			});
			return;
		}

		sendMessage(message);
		setMessage("");
	};

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
	 * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	 */
	const handleKeyPress = (e) => {
		if (e.key === 'Enter' && !e.shiftKey) {
			e.preventDefault();
			onSendMessage();
		}
	};

	return (
		<div className={`w-full max-w-lg sm:p-8 p-3 rounded shadow-lg transition-colors duration-200 mx-2 ${
			colorMode === 'dark' 
				? 'bg-background-dark text-text-dark' 
				: 'bg-background-light text-text-light'
		}`}>
			{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
			<div className="flex flex-row justify-between mb-5 items-center">
				<Heading size="lg" className="truncate">{chatRoom}</Heading>
				<div className="flex gap-2 items-center">
					{/* –°—á—ë—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω */}
					<Tooltip label={users.length > 0 ? users.join(", ") : "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"} placement="bottom" hasArrow>
						<div className="flex items-center select-none cursor-pointer px-2 py-1 rounded bg-gray-700 text-white text-sm font-semibold">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-1">
								<path strokeLinecap="round" strokeLinejoin="round" d="M16.5 7.5a3 3 0 11-6 0 3 3 0 016 0zM19.5 19.5v-1.125A2.625 2.625 0 0016.875 15.75h-9.75A2.625 2.625 0 004.5 18.375V19.5" />
							</svg>
							{users.length}
						</div>
					</Tooltip>
					{/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ */}
					<Button colorScheme="red" size="sm" onClick={() => {
						if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∏ –≤—Å—é –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é?')) {
							connection.invoke("DeleteChat", chatRoom)
								.then(() => {
									// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ backend, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–∞—Ç–∞
									closeChat();
								})
								.catch(err => {
									console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeleteChat:", err);
									toast({
										title: "–û—à–∏–±–∫–∞",
										description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç.",
										status: "error",
										duration: 4000,
										isClosable: true,
										position: "top"
									});
								});
						}
					}}>
						–£–¥–∞–ª–∏—Ç—å —á–∞—Ç
					</Button>
					<Button onClick={toggleColorMode} size="sm" className="min-w-[2.5rem]">{colorMode === 'dark' ? 'üåû' : 'üåô'}</Button>
					<CloseButton onClick={closeChat} />
				</div>
			</div>

			{/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
			<div className="flex flex-col overflow-auto scroll-smooth gap-3 pb-3 pr-3 custom-scrollbar scrollbar-thin scrollbar-thumb-gray-400/70 scrollbar-thumb-rounded-full scrollbar-track-transparent scrollbar-fade" style={{height: '60vh', minHeight: 200}}>
				{messages.length === 0 ? (
					<div className="text-center text-gray-500 mt-4">
						–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç!
					</div>
				) : (
					messages.map((messageInfo, index) => (
						<Message 
							messageInfo={messageInfo} 
							key={index} 
							currentUser={currentUser}
							colorMode={colorMode}
						/>
					))
				)}
				<span ref={messagesEndRef} />
			</div>

			{/* –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
			<div className="flex gap-2 mt-2 flex-col sm:flex-row">
				<Input
					type="text"
					value={message}
					onChange={(e) => setMessage(e.target.value)}
					onKeyPress={handleKeyPress}
					placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
					className={colorMode === 'dark' ? 'bg-gray-800' : ''}
					size="md"
					maxLength={1000}
				/>
				<Button 
					colorScheme="blue" 
					onClick={onSendMessage} 
					size="md" 
					minWidth="100px"
					isDisabled={!message.trim()}
				>
					–û—Ç–ø—Ä–∞–≤–∏—Ç—å
				</Button>
			</div>
		</div>
	);
};
